[
  {
    "objectID": "full_stack.html",
    "href": "full_stack.html",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "full_stack.html#title-2-header",
    "href": "full_stack.html#title-2-header",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "Cleansing_Projects/project1.html",
    "href": "Cleansing_Projects/project1.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Cleansing_Projects/project2.html",
    "href": "Cleansing_Projects/project2.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Cleansing_Projects/project4.html",
    "href": "Cleansing_Projects/project4.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  },
  {
    "objectID": "exploration.html",
    "href": "exploration.html",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "exploration.html#title-2-header",
    "href": "exploration.html#title-2-header",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "resume.html",
    "href": "resume.html",
    "title": "Caleb Peterson’s CV",
    "section": "",
    "text": "pet22063@byui.edu | (727) 505-0536\n\n\n\n2nd Year Student at Brigham Young University - Idaho\n\n\n\n2015-2019 Etowah High School, Woodstock\nJanuary 2023 - now Brigham Young University - Idaho, Rexburg\n\n\n\n2019 Brand Associate, Banana Republic Factory Store\n2020 Volunteer Missionary, The Church of Jesus Christ of Latter-Day Saints\n2023 Warehouse Laborer, Admiral Beverage Corporation"
  },
  {
    "objectID": "resume.html#currently",
    "href": "resume.html#currently",
    "title": "Caleb Peterson’s CV",
    "section": "",
    "text": "2nd Year Student at Brigham Young University - Idaho"
  },
  {
    "objectID": "resume.html#education",
    "href": "resume.html#education",
    "title": "Caleb Peterson’s CV",
    "section": "",
    "text": "2015-2019 Etowah High School, Woodstock\nJanuary 2023 - now Brigham Young University - Idaho, Rexburg"
  },
  {
    "objectID": "resume.html#occupation",
    "href": "resume.html#occupation",
    "title": "Caleb Peterson’s CV",
    "section": "",
    "text": "2019 Brand Associate, Banana Republic Factory Store\n2020 Volunteer Missionary, The Church of Jesus Christ of Latter-Day Saints\n2023 Warehouse Laborer, Admiral Beverage Corporation"
  },
  {
    "objectID": "ml.html",
    "href": "ml.html",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "ml.html#title-2-header",
    "href": "ml.html#title-2-header",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "cleansing.html",
    "href": "cleansing.html",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "cleansing.html#title-2-header",
    "href": "cleansing.html#title-2-header",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "story_telling.html",
    "href": "story_telling.html",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "story_telling.html#title-2-header",
    "href": "story_telling.html#title-2-header",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "index.html#title-2-header",
    "href": "index.html#title-2-header",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "notebooks/Exploration_03.html",
    "href": "notebooks/Exploration_03.html",
    "title": "Data Exploration 03",
    "section": "",
    "text": "You’re working on an exhibit for a local museum called “The Titanic Disaster”. They’ve asked you to analyze the passenger manifests and see if you can find any interesting information for the exhibit.\nThe museum curator is particularly interested in why some people might have been more likely to survive than others."
  },
  {
    "objectID": "notebooks/Exploration_03.html#part-1-import-pandas-and-load-the-data",
    "href": "notebooks/Exploration_03.html#part-1-import-pandas-and-load-the-data",
    "title": "Data Exploration 03",
    "section": "Part 1: Import Pandas and load the data",
    "text": "Part 1: Import Pandas and load the data\nRemember to import Pandas the conventional way. If you’ve forgotten how, you may want to review Data Exploration 01.\nThe dataset for this exploration is stored at the following url:\nhttps://raw.githubusercontent.com/byui-cse/cse450-course/master/data/titanic.csv\nThere are lots of ways to load data into your workspace. The easiest way in this case is to ask Pandas to do it for you.\n\nInitial Data Analysis\nOnce you’ve loaded the data, it’s a good idea to poke around a little bit to find out what you’re dealing with.\nSome questions you might ask include:\n\nWhat does the data look like?\nWhat kind of data is in each column?\nDo any of the columns have missing values?\n\n\n# Part 1: Enter your code below to import Pandas according to the\n# conventional method. Then load the dataset into a Pandas dataframe.\n\n# Write any code needed to explore the data by seeing what the first few\n# rows look like. Then display a technical summary of the data to determine\n# the data types of each column, and which columns have missing data.\n\n\npip install lets-plot\n\n\nCollecting lets-plot\n\n  Downloading lets_plot-4.6.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\n\nCollecting pypng (from lets-plot)\n\n  Downloading pypng-0.20220715.0-py3-none-any.whl.metadata (13 kB)\n\nCollecting palettable (from lets-plot)\n\n  Downloading palettable-3.3.3-py2.py3-none-any.whl.metadata (3.3 kB)\n\nDownloading lets_plot-4.6.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.4 MB)\n\n   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 3.4/3.4 MB 34.1 MB/s eta 0:00:00\n\nDownloading palettable-3.3.3-py2.py3-none-any.whl (332 kB)\n\n   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 332.3/332.3 kB 22.4 MB/s eta 0:00:00\n\nDownloading pypng-0.20220715.0-py3-none-any.whl (58 kB)\n\n   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 58.1/58.1 kB 4.2 MB/s eta 0:00:00\n\nInstalling collected packages: pypng, palettable, lets-plot\n\nSuccessfully installed lets-plot-4.6.2 palettable-3.3.3 pypng-0.20220715.0\n\n\n\n\n\nimport pandas as pd\nimport numpy as np\nfrom pandas.plotting import scatter_matrix\n\nfrom lets_plot import *\nLetsPlot.setup_html()\n\nurl = \"https://raw.githubusercontent.com/byui-cse/cse450-course/master/data/titanic.csv\"\ndf = pd.read_csv(url)"
  },
  {
    "objectID": "notebooks/Exploration_03.html#part-2-initial-exploration",
    "href": "notebooks/Exploration_03.html#part-2-initial-exploration",
    "title": "Data Exploration 03",
    "section": "Part 2: Initial Exploration",
    "text": "Part 2: Initial Exploration\nUsing your visualization library of choice, let’s first look at some features in isolation. Generate visualizations showing:\n\nA comparison of the total number of passengers who survived compared to those that died.\nA comparison of the total number of males compared to females\nA histogram showing the distribution of sibling/spouse counts\nA histogram showing the distribution of parent/child counts\n\n\ndf\n\n\n    \n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\n\n\n\n\n0\n1\nNo\n3\nBraund, Mr. Owen Harris\nmale\n22.0\n1\n0\nA/5 21171\n7.2500\nNaN\nS\n\n\n1\n2\nYes\n1\nCumings, Mrs. John Bradley (Florence Briggs Th...\nfemale\n38.0\n1\n0\nPC 17599\n71.2833\nC85\nC\n\n\n2\n3\nYes\n3\nHeikkinen, Miss. Laina\nfemale\n26.0\n0\n0\nSTON/O2. 3101282\n7.9250\nNaN\nS\n\n\n3\n4\nYes\n1\nFutrelle, Mrs. Jacques Heath (Lily May Peel)\nfemale\n35.0\n1\n0\n113803\n53.1000\nC123\nS\n\n\n4\n5\nNo\n3\nAllen, Mr. William Henry\nmale\n35.0\n0\n0\n373450\n8.0500\nNaN\nS\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n886\n887\nNo\n2\nMontvila, Rev. Juozas\nmale\n27.0\n0\n0\n211536\n13.0000\nNaN\nS\n\n\n887\n888\nYes\n1\nGraham, Miss. Margaret Edith\nfemale\n19.0\n0\n0\n112053\n30.0000\nB42\nS\n\n\n888\n889\nNo\n3\nJohnston, Miss. Catherine Helen \"Carrie\"\nfemale\nNaN\n1\n2\nW./C. 6607\n23.4500\nNaN\nS\n\n\n889\n890\nYes\n1\nBehr, Mr. Karl Howell\nmale\n26.0\n0\n0\n111369\n30.0000\nC148\nC\n\n\n890\n891\nNo\n3\nDooley, Mr. Patrick\nmale\n32.0\n0\n0\n370376\n7.7500\nNaN\nQ\n\n\n\n\n891 rows × 12 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\n# Part 2: # Write the code needed to generate the visualizations specified.\\\nsurvive = ggplot(df, aes(x='Survived')) +\\\ngeom_bar()\n\nsurvive\n\n\n   \n       \n       \n       \n   \n   \n          \n   \n   \n\n\n\n\ngender = ggplot(df, aes(x='Sex')) +\\\ngeom_bar()\n\ngender\n\n\n   \n       \n       \n       \n   \n   \n          \n   \n   \n\n\n\n\nsibspo = ggplot(df, aes(x='SibSp')) +\\\ngeom_histogram()\n\nsibspo\n\n\n   \n       \n       \n       \n   \n   \n          \n   \n   \n\n\n\n\nparch = ggplot(df, aes(x='Parch')) +\\\ngeom_histogram()\n\nparch"
  },
  {
    "objectID": "notebooks/Exploration_03.html#part-3-pairwise-comparisons",
    "href": "notebooks/Exploration_03.html#part-3-pairwise-comparisons",
    "title": "Data Exploration 03",
    "section": "Part 3: Pairwise Comparisons",
    "text": "Part 3: Pairwise Comparisons\nUse your visualization library of choice to look at how the survival distribution varied across different groups.\n\nChoose some features that you think might have had some influence over the likelihood of a titanic passenger surviving.\nFor each of those features, generate a chart for each feature showing the survival distributions when taking that feature into account\n\n\n# Write the code to explore how different features affect the survival distribution\nscatter_matrix(df, figsize=(10,10))\n\narray([[&lt;Axes: xlabel='PassengerId', ylabel='PassengerId'&gt;,\n        &lt;Axes: xlabel='Pclass', ylabel='PassengerId'&gt;,\n        &lt;Axes: xlabel='Age', ylabel='PassengerId'&gt;,\n        &lt;Axes: xlabel='SibSp', ylabel='PassengerId'&gt;,\n        &lt;Axes: xlabel='Parch', ylabel='PassengerId'&gt;,\n        &lt;Axes: xlabel='Fare', ylabel='PassengerId'&gt;],\n       [&lt;Axes: xlabel='PassengerId', ylabel='Pclass'&gt;,\n        &lt;Axes: xlabel='Pclass', ylabel='Pclass'&gt;,\n        &lt;Axes: xlabel='Age', ylabel='Pclass'&gt;,\n        &lt;Axes: xlabel='SibSp', ylabel='Pclass'&gt;,\n        &lt;Axes: xlabel='Parch', ylabel='Pclass'&gt;,\n        &lt;Axes: xlabel='Fare', ylabel='Pclass'&gt;],\n       [&lt;Axes: xlabel='PassengerId', ylabel='Age'&gt;,\n        &lt;Axes: xlabel='Pclass', ylabel='Age'&gt;,\n        &lt;Axes: xlabel='Age', ylabel='Age'&gt;,\n        &lt;Axes: xlabel='SibSp', ylabel='Age'&gt;,\n        &lt;Axes: xlabel='Parch', ylabel='Age'&gt;,\n        &lt;Axes: xlabel='Fare', ylabel='Age'&gt;],\n       [&lt;Axes: xlabel='PassengerId', ylabel='SibSp'&gt;,\n        &lt;Axes: xlabel='Pclass', ylabel='SibSp'&gt;,\n        &lt;Axes: xlabel='Age', ylabel='SibSp'&gt;,\n        &lt;Axes: xlabel='SibSp', ylabel='SibSp'&gt;,\n        &lt;Axes: xlabel='Parch', ylabel='SibSp'&gt;,\n        &lt;Axes: xlabel='Fare', ylabel='SibSp'&gt;],\n       [&lt;Axes: xlabel='PassengerId', ylabel='Parch'&gt;,\n        &lt;Axes: xlabel='Pclass', ylabel='Parch'&gt;,\n        &lt;Axes: xlabel='Age', ylabel='Parch'&gt;,\n        &lt;Axes: xlabel='SibSp', ylabel='Parch'&gt;,\n        &lt;Axes: xlabel='Parch', ylabel='Parch'&gt;,\n        &lt;Axes: xlabel='Fare', ylabel='Parch'&gt;],\n       [&lt;Axes: xlabel='PassengerId', ylabel='Fare'&gt;,\n        &lt;Axes: xlabel='Pclass', ylabel='Fare'&gt;,\n        &lt;Axes: xlabel='Age', ylabel='Fare'&gt;,\n        &lt;Axes: xlabel='SibSp', ylabel='Fare'&gt;,\n        &lt;Axes: xlabel='Parch', ylabel='Fare'&gt;,\n        &lt;Axes: xlabel='Fare', ylabel='Fare'&gt;]], dtype=object)"
  },
  {
    "objectID": "notebooks/Exploration_03.html#part-4-feature-engineering",
    "href": "notebooks/Exploration_03.html#part-4-feature-engineering",
    "title": "Data Exploration 03",
    "section": "Part 4: Feature Engineering",
    "text": "Part 4: Feature Engineering\nThe museum curator wonders if the passenger’s rank and title might have anything to do with whether or not they survived. Since this information is embedded in their name, we’ll use “feature engineering” to create two new columns:\n\nTitle: The passenger’s title\nRank: A boolean (true/false) indicating if a passenger was someone of rank.\n\nFor the first new column, you’ll need to find a way to extract the title portion of their name. Be sure to clean up any whitespace or extra punctuation.\nFor the second new column, you’ll need to first look at a summary of your list of titles and decide what exactly constitutes a title of rank. Will you include military and eccelsiastical titles? Once you’ve made your decision, create the second column.\nYou may want to review prior Data Explorations for tips on creating new columns and checking for lists of values.\n\n# Enter the code needed to create the two new columns\ndf['Title'] = df['Name'].str.extract(r',\\s*([^\\.]+)\\.')\n\ndf\n\ndf.value_counts('Title')\n\ndef classify(title):\n    if title == 'Col':\n        return 'True'\n    elif title == 'Capt':\n        return 'True'\n    elif title == 'Major':\n        return 'True'\n    else:\n        return 'False'\n\ndf['Group'] = df['Title'].apply(classify)\n\ndf\n\n\n    \n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\nTitle\nGroup\n\n\n\n\n0\n1\nNo\n3\nBraund, Mr. Owen Harris\nmale\n22.0\n1\n0\nA/5 21171\n7.2500\nNaN\nS\nMr\nFalse\n\n\n1\n2\nYes\n1\nCumings, Mrs. John Bradley (Florence Briggs Th...\nfemale\n38.0\n1\n0\nPC 17599\n71.2833\nC85\nC\nMrs\nFalse\n\n\n2\n3\nYes\n3\nHeikkinen, Miss. Laina\nfemale\n26.0\n0\n0\nSTON/O2. 3101282\n7.9250\nNaN\nS\nMiss\nFalse\n\n\n3\n4\nYes\n1\nFutrelle, Mrs. Jacques Heath (Lily May Peel)\nfemale\n35.0\n1\n0\n113803\n53.1000\nC123\nS\nMrs\nFalse\n\n\n4\n5\nNo\n3\nAllen, Mr. William Henry\nmale\n35.0\n0\n0\n373450\n8.0500\nNaN\nS\nMr\nFalse\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n886\n887\nNo\n2\nMontvila, Rev. Juozas\nmale\n27.0\n0\n0\n211536\n13.0000\nNaN\nS\nRev\nFalse\n\n\n887\n888\nYes\n1\nGraham, Miss. Margaret Edith\nfemale\n19.0\n0\n0\n112053\n30.0000\nB42\nS\nMiss\nFalse\n\n\n888\n889\nNo\n3\nJohnston, Miss. Catherine Helen \"Carrie\"\nfemale\nNaN\n1\n2\nW./C. 6607\n23.4500\nNaN\nS\nMiss\nFalse\n\n\n889\n890\nYes\n1\nBehr, Mr. Karl Howell\nmale\n26.0\n0\n0\n111369\n30.0000\nC148\nC\nMr\nFalse\n\n\n890\n891\nNo\n3\nDooley, Mr. Patrick\nmale\n32.0\n0\n0\n370376\n7.7500\nNaN\nQ\nMr\nFalse\n\n\n\n\n891 rows × 14 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\nRevisit Visualizations\nNow that you have the new columns in place. Revisit the pairwise comparison plots to see if the new columns reveal any interesting relationships.\n\n# Enter the code needed to recheck the pairwise comparison."
  },
  {
    "objectID": "notebooks/Exploration_03.html#part-5-encoding",
    "href": "notebooks/Exploration_03.html#part-5-encoding",
    "title": "Data Exploration 03",
    "section": "Part 5: Encoding",
    "text": "Part 5: Encoding\nThe museum has partnered with a data science group to build some interactive predicitive models using the titanic passenger data.\nMany machine learning algorithms require categorical features to be encoded as numbers.\nThere are two approaches to this, label encoding (sometimes called factorization), and “one-hot” encoding.\n\nLabel Encoding\nLabel encoding creates numeric labels for each categorical value. For example, imagine we have a feature in the data called Pet with these values for the first five rows: ['Dog', 'Cat', 'Dog', 'Dog', 'Bird'].\nWe could create a new feature called Pet_Encoded where those values are represented as: [0, 1, 0, 0, 2]. Where 0 = Dog, 1 = Cat, and 2 = Bird.\nIn pandas there are two common ways to label encode a feature:\n\nMethod 1: factorize()\nFirst, we could pandas’ factorize() method. It takes the series you want to encode as an argument and returns a list of two items.\nThe first item is an array of encoded values. The second is the set of original values.\n# The factorize() method returns the new values and the originals in a list.\n# So the [0] at the end indicates we want only the new values.\nmyData['Pet_Encoded'] = pd.factorize(myData['Pet'])[0]\n\n\nMethod 2: Category Data Type\nEvery column in a pandas dataframe is a certain datatype. Usually, pandas infers which datatype to use based on the values of the column. However, we can use the astype() method to convert a feature from one type to another.\nIf we first convert a feature to the category datatype, we can ask pandas to create a new column in the data frame based on the category codes:\n# Convert our column to the category type\nmyData['Pet'] = myData['Pet'].astype('category')\nmyData['Pet_Encoded'] = myData['Pet'].cat.codes\nWhichever method we choose, our machine learning algorithm could use the new Pet_Encoded feature in place of the Pet feature.\n\n# Create a new column in the dataset called \"Sex_Encoded\" containing the\n# label encoded values of the \"Sex\" column\n\n\n\n\nOne-Hot Encoding\nOne problem with label encoding is that it can make a categorical variable appear as if it contains a quantitative relationship between its values.\nIn the example above, is Bird twice as important as Cat? Some algorithms might interpret those values that way.\nOne-Hot encoding avoids this problem by creating a new feature for each category. The value of the new feature is either 0 (is not this value) or 1 (is this value).\nIn pandas, we can use the get_dummies() method to deal with this problem:\nmyEncodedData = pd.get_dummies(myData, columns=['Pet'])\nIn the case of our Pet example, the new features created by get_dummies() would be:\n\n\n\nPet_is_Dog\nPet_is_Cat\nPet_is_Bird\n\n\n\n\n1\n0\n0\n\n\n0\n1\n0\n\n\n1\n0\n0\n\n\n1\n0\n0\n\n\n0\n0\n1\n\n\n\nNotice that for our data, if Pet_is_Bird = 0 and Pet_is_Cat = 0, we know that the pet has to be a dog. So the Pet_is_Dog column contains redundant information. When this happens, we say that our data contains a multicollinearity problem.\nTo avoid this, we can tell get_dummies() that we want to get rid of one of the columns using the drop_first parameter:\nmyEncodedData = pd.get_dummies(myData, columns=['Pet'], drop_first=True)\nThe main disadvantage to One-Hot encoding is that if the feature you’re encoding has a lot of different values, it can result in a lot of extra features. This can sometimes lead to poor performance with some types of algorithms.\n\n# Use the pandas get_dummies() method to one-hot encode the Embarked column."
  },
  {
    "objectID": "notebooks/Exploration_03.html#part-6-conclusions",
    "href": "notebooks/Exploration_03.html#part-6-conclusions",
    "title": "Data Exploration 03",
    "section": "Part 6: Conclusions",
    "text": "Part 6: Conclusions\nBased on your analysis, what interesting relationships did you find? Write three interesting facts the museum can use in their exhibit."
  },
  {
    "objectID": "notebooks/Exploration_03.html#above-and-beyond",
    "href": "notebooks/Exploration_03.html#above-and-beyond",
    "title": "Data Exploration 03",
    "section": "🌟 Above and Beyond 🌟",
    "text": "🌟 Above and Beyond 🌟\n\nThere appears to be a lot of different variations of similar titles. (such as abbreviations for Miss and Mademoiselle).\nScan through the different titles to see which titles can be consolidated, then use what you know about data manipulation to simplify the distribution.\nOnce you’ve finished, check the visualizations again to see if that made any difference.\nThe museum curator has room for a couple of nice visualizations for the exhibit. Create additional visualizations that are suitable for public display."
  },
  {
    "objectID": "Cleansing_Projects/project5.html",
    "href": "Cleansing_Projects/project5.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Cleansing_Projects/project3.html",
    "href": "Cleansing_Projects/project3.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  },
  {
    "objectID": "competition.html",
    "href": "competition.html",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "competition.html#title-2-header",
    "href": "competition.html#title-2-header",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  }
]